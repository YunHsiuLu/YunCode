#include <iostream>
#include <vector>
using namespace std;

struct node {
	int s[2] = {0, 0};
	int t = 0, c = 0, v = -99;
};
vector<node> NODE;
int delay = 0;
int dfs(node n, int de) {
	if (n.t == 0) {
		n.v = dfs(NODE[n.s[0]], de);
	}
	else if (n.s[0] == 0 && n.s[1] == 0) {
		delay = max(delay, de);
	}
	else {
		de++;
		int tmp1 = dfs(NODE[n.s[0]], de), tmp2 = 0;
		if  (n.s[1] > 0) tmp2 = dfs(NODE[n.s[1]], de);
		switch (n.c) {
			case 1:
				n.v = tmp1 & tmp2;
				break;
			case 2:
				n.v = tmp1 | tmp2;
				break;
			case 3:
				n.v = tmp1 ^ tmp2;
				break;
			case 4:
				n.v = !tmp1;
				break;
			default:
				break;
		}
	}
	return n.v;
}

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	int p, q, r, m;
	cin >> p >> q >> r >> m;
	for (int i = 0; i < p+q+r+1; i++) {
		node tmp;
		NODE.push_back(tmp);
	}
	for (int i = 1; i < 1+p; i++)
		cin >> NODE[i].v;
	for (int i = 1+p; i < 1+p+q; i++)
		cin >> NODE[i].c;
	for (int i = 1; i < 1+m; i++) {
		int s, t;
		cin >> s >> t;
		NODE[s].t = t;
		(NODE[t].s[0] == 0) ? NODE[t].s[0] = s : NODE[t].s[1] = s;
	}
	
	for (int i = 1+p; i < 1+p+q; i++) NODE[i].v = dfs(NODE[i], 0);
	for (int i = 1+p+q; i < 1+p+q+r; i++) NODE[i].v = NODE[NODE[i].s[0]].v;
	/*
	for (int i = 0; i < 1+m; i++) {
		printf("[%d, %d], %d, %d, %d\n", NODE[i].s[0], NODE[i].s[1], NODE[i].t, NODE[i].c, NODE[i].v);
	}
	*/
	cout << delay << endl;
	for (int i = 1+p+q; i < 1+p+q+r; i++) cout << NODE[i].v << " ";
	cout << endl;
	return 0;
}

