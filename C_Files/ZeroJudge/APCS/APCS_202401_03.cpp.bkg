#include <iostream>
#include <vector>
using namespace std;

struct node {
	vector<int> from;
	vector<int> to;
	int output = -1;
	int delay = 0;
	int gate = -1;
};

int delay = 0;
vector<node> vec;

void BFS(vector<int> start) {
	if (start.size() == 0) return;
	delay++;
	vector<int> newStart;
	for (int i = 0; i < start.size(); i++) {
		node vv = vec[start[i]];
		for (int j = 0; j < vv.to.size(); j++) {
			int to = vv.to[j];
			vec[to].from.push_back(start[i]);
			if ((vec[to].gate == 4 && vec[to].from.size() == 1) || vec[to].from.size() == 2) {
				newStart.push_back(to);
				node point = vec[to];
				int gate = vec[to].gate;
				if (gate == 1) {
					if (vec[point.from[0]].output == 1 && vec[point.from[1]].output == 1) {
						vec[to].output = 1;
					}
					else vec[to].output = 0;
				}
				else if (gate == 2) {
					if (vec[point.from[0]].output == 1 || vec[point.from[1]].output == 1) {
						vec[to].output = 1;
					}
					else vec[to].output = 0;
				}
				else if (gate == 3) {
					if (vec[point.from[0]].output != vec[point.from[1]].output) {
						vec[to].output = 1;
					}
					else vec[to].output = 0;
				}
				else vec[to].output = (vec[point.from[0]].output==0) ? 1 : 0;
			}
		}
	}
	BFS(newStart);
}

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	int in, out, logic, line;
	cin >> in >> logic >> out >> line;
	vector<int> start;
	for (int i = 0; i < in+out+logic; i++) {
		node tmp;
		vec.push_back(tmp);
	}
	for (int i = 0; i < in; i++) {
		int tmp;
		cin >> tmp;
		vec[i].output = tmp;
		start.push_back(i);
	}
	for (int i = in; i < in+logic; i++) {
		int tmp;
		cin >> tmp;
		vec[i].gate = tmp;
	}
	for (int i = 0; i < line; i++) {
		int a, b;
		cin >> a >> b;
		vec[a-1].to.push_back(b-1);
	}
	BFS(start);
	cout << delay-1 << endl;
	for (int i = in+logic; i < in+logic+out; i++)
		cout << vec[vec[i].from[0]].output << " ";
	cout << endl;
	return 0;
}

